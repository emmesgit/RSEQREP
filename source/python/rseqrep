#!/usr/bin/python3
#############################################################################################################
# RSEQREP: RNA-Seq Reports, an open-source cloud-enabled framework for reproducible
# RNA-Seq data processing, analysis, and result reporting
# 
# https://github.com/emmesgit/RSEQREP
#
# Copyright (C) 2019 The Emmes Corporation 
# 
# This program is free software that contains third party software subject to various licenses, 
# namely, the GNU General Public License version 3 (or later), the GNU Affero General Public License 
# version 3 (or later), and the LaTeX Project Public License v.1.3(c). A list of the software contained 
# in this program, including the applicable licenses, can be accessed here: 
# 
# https://github.com/emmesgit/RSEQREP/blob/master/SOFTWARE.xlsx    
# 
# You can redistribute and/or modify this program, including its components, only under the terms of 
# the applicable license(s).  
#
# This program is distributed in the hope that it will be useful, but "as is," WITHOUT ANY WARRANTY; 
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# To cite this software, please reference doi:10.12688/f1000research.13049.1
#
# Program:  rseqrep
# Version:  RSEQREP 2.2.0
# Author:   William F Hooper, Travis L. Jensen, Johannes B. Goll
# Purpose:  Preprocessing command line interface
# Input:    N/A
# Output:   N/A
#############################################################################################################

import argparse
import os
import subprocess
import multiprocessing
import sys
import snakemake 
import psutil
import shutil
import logging
import select
import utils  

## Get get the directory that this script sits in
scriptdir = os.path.dirname(os.path.realpath(__file__)) + '/..'

############
# Metadata #
############

__author__    = ['Travis L. Jensen', 'Johannes B. Goll', 'William F. Hooper']
__copyright__ = 'Copyright (C) 2018 The Emmes Corporation'
__licesnse__  = 'GPL'
__version__   = '2.2.0'
__maintainer  = ['Travis L. Jensen', 'William F. Hooper']
__email__     = 'whooper@emmes.com'
__status__    = 'Development'



################################
# Parse command line arguments #
################################

parser = argparse.ArgumentParser(prog="RSEQREP " + __version__)
parser.add_argument('-P','--run-preprocessing', help='Run pre-processing', action='store_true', default=False)
parser.add_argument('-c','--config',       		help='Path to XLSX configuration file.', default='check_string_for_empty')
parser.add_argument('-l','--log',          		help='Log file to write to.  The log MUST be printed in the RSEQREP directory (ex=/home/repuser/RSEQREP/run_log.txt).', default='check_string_for_empty')
parser.add_argument('-C','--continue-run',  	help='Continue preprocessing where the prior run left off', action='store_true', default=False)
parser.add_argument('-v','--version',      		help='Print the RSEQREP version and exit', action='store_true', default=False)
parser.add_argument('-q','--quiet',        		help='Only print warnings and errors', action='store_true', default=False)
parser.add_argument('-d','--debug',       		help='Print debug messages', action='store_true', default=False)
parser.add_argument('-@','--threads',           help='Number of threads to use. If more threads are specified than on the machine, all threads on the current machine are used', default=1)
parser.add_argument('--save-int-local-files',help='Save all intermediate workflow files locally (includes CRAM , fastqc, intermediate rseqc files).', action='store_true', default=False)
parser.add_argument('--unlock',     			help='Unlock working directories in the case of a kill signal or power loss', action='store_true', default=False)

args = parser.parse_args()



##################
# Version output #
##################

## Print version and exit 
if args.version:
	print('RSEQREP ' + __version__)
	exit(0)



############################
# Configure stdout logging #
############################

if args.quiet:
	log_level = logging.WARNING
elif args.debug:
	log_level = logging.DEBUG
else:
	log_level = logging.INFO

logging.basicConfig(level=log_level, 
					format='[rseqrep] %(asctime)s - %(levelname)s - %(message)s', 
					datefmt='%m/%d/%Y %I:%M:%S %p',
					handlers=[logging.StreamHandler(sys.stdout)])



##########################################
# Exit if we aren't given anything to do #
##########################################

if args.config=='check_string_for_empty':
	logging.error('A configuration file must be supplied. Run rseqrep --help for more information.')
	exit(1)



########################
# Parse configuration  #
########################

config_parser = scriptdir + '/r/parse-configuration.r'
cmd = 'Rscript ' + config_parser + ' ' + args.config + ' ' + scriptdir 
try:
	utils.logging_call(cmd, shell=True)
except subprocess.CalledProcessError:
	logging.error('Configuration parsing failed. See above for more details.')
	exit(1)



############################
# Grab config directories  #
############################

f               = open(scriptdir+'/../dir.csv')
predir          = f.readline().strip()
reportdir       = f.readline().strip()
pre_yaml_config = f.readline().strip()
sample_metadata = f.readline().strip()
f.close()

datadir   = reportdir+'/data'



##########################
# Configure file logging #
##########################

if args.log == 'check_string_for_empty':
	args.log = predir+'/preprocess.log'
else:
	args.log = os.path.abspath(os.path.dirname(args.log)) + '/' + os.path.basename(args.log)
	
logging.getLogger('').addHandler(logging.FileHandler(args.log))



####################################
# Run selected workflow components #
####################################

## Preprocessing 
if args.run_preprocessing or args.unlock:
	if args.run_preprocessing:
		logging.info('Starting pre-processing')
	if args.unlock:
		logging.info('Unlocking working directory')
	
	snakemake.snakemake(snakefile=scriptdir+'/snakemake/Snakefile.sh',
					    unlock=args.unlock,
					    force_incomplete=True,
					    workdir=predir,
					    config={'srcdir'       :scriptdir, 
					            'datadir'      :datadir,
					            'log_level'    :log_level,
					            'log_file'     :args.log,
					            'saveintlocalfiles' :args.save_int_local_files},
					    cores = int(args.threads),
					    forceall=(not args.continue_run),
					    log_handler=utils.logHandler,
					    quiet=args.quiet,
					    notemp=(args.save_int_local_files))
